<!DOCTYPE NoteCase-File>
<!--LastNote:4-->
<HTML>
<HEAD>
<meta content="text/html;charset=UTF-8" http-equiv="Content-Type">
<meta name="generator" content="NoteCase 1.9.8">
<TITLE></TITLE>
</HEAD>
<BODY>
<DL>
<DT>Git下载安装</DT>
<!--property:date_created=1474439088-->
<!--property:date_modified=1478586605-->
<!--property:expanded-->
<DD>
安装过程：<BR>
1.选择右键 显示的内容<BR>
<BR>
2.设置path：（可设置Windows调用git命令）<BR>
<BR>
3.选择回车换行的格式   ：  默认为(检出时转换为Windows风格,提交时转换为Linux风格.)<BR>
	<BR>
4.配置本地的账户和邮箱：  git config -l  可以查看<BR>
<BR>
-------------------------------------------------------------------------------------------------------<BR>
5.创建密钥              $ ssh-keygen -t rsa -C &quot;本地用户邮箱名&quot;<BR>
		id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。<DL>
<DT>git操作</DT>
<!--property:date_created=1474525890-->
<!--property:date_modified=1478502277-->
<DD>
在远程仓库  加入本地的  ssh 密匙<BR>
<BR>
3.push到远程仓库   git push ----输入用户名   密码<BR>
<BR>
任何提交到Git的内容都可以被修复<BR>
<BR>
一.获取项目的git仓库<BR>
	1.clone   从远程仓库拷贝  【git clone https://github.com/cncounter/LispGentleIntro.git】<BR>
	<BR>
	2.git init   初始化当前的工作目录   git clone git://github.com/schacon/grit.git mygrit  （自定义文件夹名字）<BR>
	<BR>
	Git支持多数据传输协议：①git://<BR>
						② http(s)://<BR>
						③ user@server:/path.git<BR>
						<BR>
二.git 常用指令<BR>
	1.暂存区：①git add  将文件加入到暂存区   <BR>
			②git reset HEAD 文件名  ： 将文件从暂存区移除<BR>
			<BR>
	2. 列出要忽略的文件：创建.gitignore 文件 <BR>
	<BR>
	3. 查看暂存区与未进入暂存区  文件的区别：git diff <BR>
				【git diff --cached    查看暂存区和上次提交的快照的差异】<BR>
				<BR>
	4.本地库：① git commit    提交到本地库 <BR>
				【-a  跳过缓存操作，缓存所有跟踪的文件】<BR>
				【--amend   修改最后一次提交】<BR>
				【-m  “直接加的注释部分”】		<BR>
			②git rm 文件  （可直接删除，同样记录到暂存区） ：删除文件，记录到暂存区 	<BR>
				-f （force 强力）：删除之前修改过内容，且已经放到暂存区，需要-f强制删除（防止误删修改的内容）	<BR>
				-cached   （取消跟踪,本地文件还在）   记录到暂存区<BR>
		<BR>
	6.文件改名：git rm 文件名   文件名   <BR>
					相当于删除原文件，增加一个新文件		<BR>
	7.查看历史：git log  	<BR>
				-p  记录详情    -num （数字）   记录条数	<BR>
				--stat    简要的增改行数统计	<BR>
<BR>
三.版本回退<BR>
	1.commit id    每次提交的版本号   用十六进制表示<BR>
	<BR>
	2.回退到上一个版本 ：  git reset   HEAD^  （上一个版本 ）（  HEAD^^  上上个版本）（HEAD~100 往前100个版本）<BR>
				 				git reset  （commit id 版本号  不需要写全）<BR>
	<BR>
	3.git reflog  记录每一次的命令 ，可以查看消失了的版本号									<BR>
	<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
	
</DD>
<DT>远程仓库</DT>
<!--property:date_created=1474614428-->
<!--property:date_modified=1474614736-->
<DD>
1. 显示当前配置的远程仓库： git remote <BR>
					-v ：显示对应的克隆地址<BR>
					<BR>
2.添加远程仓库： git remote add （别名）  git://github.com/hlgajsz331994/Test				
</DD>
<DT>git分支</DT>
<!--property:date_created=1474868867-->
<!--property:date_modified=1478588664-->
<DD>
1.分支生成和管理：<BR>
		1）Commit对象包含 指向 新建前生成的 tree对象的指针               tree对象指向 暂存时生成的内容快照对象blob  【深】<BR>
		2）默认分支  master      Head  指向当前分支<BR>
		3） git  branch   name ：新建分支<BR>
		4）git check out  name  ：切换分支    <BR>
						-b  同时新建<BR>
		5）git merge name ：合并分支<BR>
<BR>
2.流程：1） 合并分支：新建分支 -切换到新建分支 - 合并分支<BR>
		2）解决冲突：处理冲突部分，再进行合并<BR>
		3）<BR>
<BR>
<BR>
<BR>
 <BR>
<BR>
 
</DD>
<DT>TortoiseGit</DT>
<!--property:date_created=1478500442-->
<!--property:date_modified=1479113170-->
<!--property:finished=1-->
<DD>
1.fetch 和pull 的区别  ： fetch拉取到本地 不与本地分支合并<BR>
<BR>
2.show log  可以把HEAD指向到之前的节点  ，     revert  相当于chenck out   回到最近的状态<BR>
<BR>
3.revision graph   查看结构图<BR>
<BR>
4.Repo-browser   查看文件结构<BR>
<BR>
5.push的分支为当前HEAD 指向的分支，则只拉取当前的分支 ;如果为其他分支，则拉取所有分支    
</DD>
<DT>流程</DT>
<!--property:date_created=1478502177-->
<!--property:date_modified=1478585922-->
<DD>
1.add 和 commit     ：  add 加入到暂存区          、  commit 从暂存区提交到当前分支<BR>
<BR>
2.工作区 、 暂存区 、 本地仓库 、 远程仓库 <BR>
<BR>
3. git checkout  --file    这个文件回到  最近一次  commit 和add 的状态    （把文件在工作区的修改全部撤销）<BR>
				【本地仓库替换工作区内容】<BR>
<BR>
4.命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，<BR>
	但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。<BR>
	<BR>

</DD>
<DT>gitHub</DT>
<!--property:date_created=1478587407-->
<!--property:date_modified=1478587551-->
<DD>
1. 支持两种协议 ：  <BR>
			1）  http（s） ：  每次推送必须输入口令 ，  速度慢<BR>
			2） git：//    ：  默认使用ssh 密钥     原生的git协议速度最快
</DD>
</DL>

</DD>
<DT>maven：jar管理</DT>
<!--property:date_created=1474874896-->
<!--property:date_modified=1474874941-->
<DD>
1.有一个中心仓库存放jar包，       减少容量，方便管理
</DD>
<DT>SVN</DT>
<!--property:date_created=1474505690-->
<!--property:date_modified=1474505743-->
<DD>
1.有一台中心服务器存放版本库：   每次操作都是   提交-更新<BR>
<BR>
2.有频繁的冲突
</DD>
</DL>
</BODY>
</HTML>
